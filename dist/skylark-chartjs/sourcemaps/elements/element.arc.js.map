{"version":3,"sources":["elements/element.arc.js"],"names":["define","__module__0","__module__1","__module__2","exports","module","defaults","Element","helpers","__isValidToReturn","obj","Array","isArray","attr","__isEmptyObject","_set","elements","arc","backgroundColor","global","defaultColor","borderColor","borderWidth","borderAlign","extend","inLabelRange","mouseX","vm","this","_view","Math","pow","x","radius","hoverRadius","inRange","chartX","chartY","pointRelativePosition","getAngleFromPoint","y","angle","distance","startAngle","endAngle","PI","betweenAngles","withinRadius","innerRadius","outerRadius","getCenterPoint","halfAngle","halfRadius","cos","sin","getArea","tooltipPosition","centreAngle","rangeFromCentre","draw","angleMargin","ctx","_chart","sA","eA","pixelMargin","save","beginPath","max","closePath","fillStyle","fill","clip","lineWidth","lineJoin","strokeStyle","stroke","restore"],"mappings":"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","file":"../../elements/element.arc.js","sourcesContent":["define([\n    '../core/core.defaults',\n    '../core/core.element',\n    '../helpers/index'\n], function (__module__0, __module__1, __module__2) {\n    'use strict';\n    var exports = {};\n    var module = { exports: {} };\n    var defaults = __module__0;\n    var Element = __module__1;\n    var helpers = __module__2;\n    defaults._set('global', {\n        elements: {\n            arc: {\n                backgroundColor: defaults.global.defaultColor,\n                borderColor: '#fff',\n                borderWidth: 2,\n                borderAlign: 'center'\n            }\n        }\n    });\n    module.exports = Element.extend({\n        inLabelRange: function (mouseX) {\n            var vm = this._view;\n            if (vm) {\n                return Math.pow(mouseX - vm.x, 2) < Math.pow(vm.radius + vm.hoverRadius, 2);\n            }\n            return false;\n        },\n        inRange: function (chartX, chartY) {\n            var vm = this._view;\n            if (vm) {\n                var pointRelativePosition = helpers.getAngleFromPoint(vm, {\n                    x: chartX,\n                    y: chartY\n                });\n                var angle = pointRelativePosition.angle;\n                var distance = pointRelativePosition.distance;\n                var startAngle = vm.startAngle;\n                var endAngle = vm.endAngle;\n                while (endAngle < startAngle) {\n                    endAngle += 2 * Math.PI;\n                }\n                while (angle > endAngle) {\n                    angle -= 2 * Math.PI;\n                }\n                while (angle < startAngle) {\n                    angle += 2 * Math.PI;\n                }\n                var betweenAngles = angle >= startAngle && angle <= endAngle;\n                var withinRadius = distance >= vm.innerRadius && distance <= vm.outerRadius;\n                return betweenAngles && withinRadius;\n            }\n            return false;\n        },\n        getCenterPoint: function () {\n            var vm = this._view;\n            var halfAngle = (vm.startAngle + vm.endAngle) / 2;\n            var halfRadius = (vm.innerRadius + vm.outerRadius) / 2;\n            return {\n                x: vm.x + Math.cos(halfAngle) * halfRadius,\n                y: vm.y + Math.sin(halfAngle) * halfRadius\n            };\n        },\n        getArea: function () {\n            var vm = this._view;\n            return Math.PI * ((vm.endAngle - vm.startAngle) / (2 * Math.PI)) * (Math.pow(vm.outerRadius, 2) - Math.pow(vm.innerRadius, 2));\n        },\n        tooltipPosition: function () {\n            var vm = this._view;\n            var centreAngle = vm.startAngle + (vm.endAngle - vm.startAngle) / 2;\n            var rangeFromCentre = (vm.outerRadius - vm.innerRadius) / 2 + vm.innerRadius;\n            return {\n                x: vm.x + Math.cos(centreAngle) * rangeFromCentre,\n                y: vm.y + Math.sin(centreAngle) * rangeFromCentre\n            };\n        },\n        draw: function () {\n            var ctx = this._chart.ctx;\n            var vm = this._view;\n            var sA = vm.startAngle;\n            var eA = vm.endAngle;\n            var pixelMargin = vm.borderAlign === 'inner' ? 0.33 : 0;\n            var angleMargin;\n            ctx.save();\n            ctx.beginPath();\n            ctx.arc(vm.x, vm.y, Math.max(vm.outerRadius - pixelMargin, 0), sA, eA);\n            ctx.arc(vm.x, vm.y, vm.innerRadius, eA, sA, true);\n            ctx.closePath();\n            ctx.fillStyle = vm.backgroundColor;\n            ctx.fill();\n            if (vm.borderWidth) {\n                if (vm.borderAlign === 'inner') {\n                    ctx.beginPath();\n                    angleMargin = pixelMargin / vm.outerRadius;\n                    ctx.arc(vm.x, vm.y, vm.outerRadius, sA - angleMargin, eA + angleMargin);\n                    if (vm.innerRadius > pixelMargin) {\n                        angleMargin = pixelMargin / vm.innerRadius;\n                        ctx.arc(vm.x, vm.y, vm.innerRadius - pixelMargin, eA + angleMargin, sA - angleMargin, true);\n                    } else {\n                        ctx.arc(vm.x, vm.y, pixelMargin, eA + Math.PI / 2, sA - Math.PI / 2);\n                    }\n                    ctx.closePath();\n                    ctx.clip();\n                    ctx.beginPath();\n                    ctx.arc(vm.x, vm.y, vm.outerRadius, sA, eA);\n                    ctx.arc(vm.x, vm.y, vm.innerRadius, eA, sA, true);\n                    ctx.closePath();\n                    ctx.lineWidth = vm.borderWidth * 2;\n                    ctx.lineJoin = 'round';\n                } else {\n                    ctx.lineWidth = vm.borderWidth;\n                    ctx.lineJoin = 'bevel';\n                }\n                ctx.strokeStyle = vm.borderColor;\n                ctx.stroke();\n            }\n            ctx.restore();\n        }\n    });\n    function __isEmptyObject(obj) {\n        var attr;\n        for (attr in obj)\n            return !1;\n        return !0;\n    }\n    function __isValidToReturn(obj) {\n        return typeof obj != 'object' || Array.isArray(obj) || !__isEmptyObject(obj);\n    }\n    if (__isValidToReturn(module.exports))\n        return module.exports;\n    else if (__isValidToReturn(exports))\n        return exports;\n});"]}