{"version":3,"sources":["helpers/helpers.canvas.js"],"names":["define","__module__0","exports","module","helpers","PI","Math","RAD_PER_DEG","DOUBLE_PI","HALF_PI","QUARTER_PI","TWO_THIRDS_PI","clear","chart","ctx","clearRect","width","height","roundedRect","x","y","radius","r","min","left","top","right","bottom","moveTo","arc","closePath","rect","drawPoint","style","rotation","type","xOffset","yOffset","size","cornerRadius","rad","toString","isNaN","beginPath","sin","cos","lineTo","SQRT1_2","fill","stroke","drawImage","_isPointInArea","point","area","clipArea","save","clip","unclipArea","restore","previous","target","flip","stepped","steppedLine","midpoint","tension","bezierCurveTo","controlPointPreviousX","controlPointNextX","controlPointPreviousY","controlPointNextY","__isValidToReturn","obj","Array","isArray","attr","__isEmptyObject","drawRoundedRectangle","apply","arguments"],"mappings":"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","file":"../../helpers/helpers.canvas.js","sourcesContent":["define(['./helpers.core'], function (__module__0) {\n    'use strict';\n    var exports = {};\n    var module = { exports: {} };\n    var helpers = __module__0;\n    var PI = Math.PI;\n    var RAD_PER_DEG = PI / 180;\n    var DOUBLE_PI = PI * 2;\n    var HALF_PI = PI / 2;\n    var QUARTER_PI = PI / 4;\n    var TWO_THIRDS_PI = PI * 2 / 3;\n    var exports = {\n        clear: function (chart) {\n            chart.ctx.clearRect(0, 0, chart.width, chart.height);\n        },\n        roundedRect: function (ctx, x, y, width, height, radius) {\n            if (radius) {\n                var r = Math.min(radius, height / 2, width / 2);\n                var left = x + r;\n                var top = y + r;\n                var right = x + width - r;\n                var bottom = y + height - r;\n                ctx.moveTo(x, top);\n                if (left < right && top < bottom) {\n                    ctx.arc(left, top, r, -PI, -HALF_PI);\n                    ctx.arc(right, top, r, -HALF_PI, 0);\n                    ctx.arc(right, bottom, r, 0, HALF_PI);\n                    ctx.arc(left, bottom, r, HALF_PI, PI);\n                } else if (left < right) {\n                    ctx.moveTo(left, y);\n                    ctx.arc(right, top, r, -HALF_PI, HALF_PI);\n                    ctx.arc(left, top, r, HALF_PI, PI + HALF_PI);\n                } else if (top < bottom) {\n                    ctx.arc(left, top, r, -PI, 0);\n                    ctx.arc(left, bottom, r, 0, PI);\n                } else {\n                    ctx.arc(left, top, r, -PI, PI);\n                }\n                ctx.closePath();\n                ctx.moveTo(x, y);\n            } else {\n                ctx.rect(x, y, width, height);\n            }\n        },\n        drawPoint: function (ctx, style, radius, x, y, rotation) {\n            var type, xOffset, yOffset, size, cornerRadius;\n            var rad = (rotation || 0) * RAD_PER_DEG;\n            if (style && typeof style === 'object') {\n                type = style.toString();\n                if (type === '[object HTMLImageElement]' || type === '[object HTMLCanvasElement]') {\n                    ctx.drawImage(style, x - style.width / 2, y - style.height / 2, style.width, style.height);\n                    return;\n                }\n            }\n            if (isNaN(radius) || radius <= 0) {\n                return;\n            }\n            ctx.beginPath();\n            switch (style) {\n            default:\n                ctx.arc(x, y, radius, 0, DOUBLE_PI);\n                ctx.closePath();\n                break;\n            case 'triangle':\n                ctx.moveTo(x + Math.sin(rad) * radius, y - Math.cos(rad) * radius);\n                rad += TWO_THIRDS_PI;\n                ctx.lineTo(x + Math.sin(rad) * radius, y - Math.cos(rad) * radius);\n                rad += TWO_THIRDS_PI;\n                ctx.lineTo(x + Math.sin(rad) * radius, y - Math.cos(rad) * radius);\n                ctx.closePath();\n                break;\n            case 'rectRounded':\n                cornerRadius = radius * 0.516;\n                size = radius - cornerRadius;\n                xOffset = Math.cos(rad + QUARTER_PI) * size;\n                yOffset = Math.sin(rad + QUARTER_PI) * size;\n                ctx.arc(x - xOffset, y - yOffset, cornerRadius, rad - PI, rad - HALF_PI);\n                ctx.arc(x + yOffset, y - xOffset, cornerRadius, rad - HALF_PI, rad);\n                ctx.arc(x + xOffset, y + yOffset, cornerRadius, rad, rad + HALF_PI);\n                ctx.arc(x - yOffset, y + xOffset, cornerRadius, rad + HALF_PI, rad + PI);\n                ctx.closePath();\n                break;\n            case 'rect':\n                if (!rotation) {\n                    size = Math.SQRT1_2 * radius;\n                    ctx.rect(x - size, y - size, 2 * size, 2 * size);\n                    break;\n                }\n                rad += QUARTER_PI;\n            case 'rectRot':\n                xOffset = Math.cos(rad) * radius;\n                yOffset = Math.sin(rad) * radius;\n                ctx.moveTo(x - xOffset, y - yOffset);\n                ctx.lineTo(x + yOffset, y - xOffset);\n                ctx.lineTo(x + xOffset, y + yOffset);\n                ctx.lineTo(x - yOffset, y + xOffset);\n                ctx.closePath();\n                break;\n            case 'crossRot':\n                rad += QUARTER_PI;\n            case 'cross':\n                xOffset = Math.cos(rad) * radius;\n                yOffset = Math.sin(rad) * radius;\n                ctx.moveTo(x - xOffset, y - yOffset);\n                ctx.lineTo(x + xOffset, y + yOffset);\n                ctx.moveTo(x + yOffset, y - xOffset);\n                ctx.lineTo(x - yOffset, y + xOffset);\n                break;\n            case 'star':\n                xOffset = Math.cos(rad) * radius;\n                yOffset = Math.sin(rad) * radius;\n                ctx.moveTo(x - xOffset, y - yOffset);\n                ctx.lineTo(x + xOffset, y + yOffset);\n                ctx.moveTo(x + yOffset, y - xOffset);\n                ctx.lineTo(x - yOffset, y + xOffset);\n                rad += QUARTER_PI;\n                xOffset = Math.cos(rad) * radius;\n                yOffset = Math.sin(rad) * radius;\n                ctx.moveTo(x - xOffset, y - yOffset);\n                ctx.lineTo(x + xOffset, y + yOffset);\n                ctx.moveTo(x + yOffset, y - xOffset);\n                ctx.lineTo(x - yOffset, y + xOffset);\n                break;\n            case 'line':\n                xOffset = Math.cos(rad) * radius;\n                yOffset = Math.sin(rad) * radius;\n                ctx.moveTo(x - xOffset, y - yOffset);\n                ctx.lineTo(x + xOffset, y + yOffset);\n                break;\n            case 'dash':\n                ctx.moveTo(x, y);\n                ctx.lineTo(x + Math.cos(rad) * radius, y + Math.sin(rad) * radius);\n                break;\n            }\n            ctx.fill();\n            ctx.stroke();\n        },\n        _isPointInArea: function (point, area) {\n            var epsilon = 0.000001;\n            return point.x > area.left - epsilon && point.x < area.right + epsilon && point.y > area.top - epsilon && point.y < area.bottom + epsilon;\n        },\n        clipArea: function (ctx, area) {\n            ctx.save();\n            ctx.beginPath();\n            ctx.rect(area.left, area.top, area.right - area.left, area.bottom - area.top);\n            ctx.clip();\n        },\n        unclipArea: function (ctx) {\n            ctx.restore();\n        },\n        lineTo: function (ctx, previous, target, flip) {\n            var stepped = target.steppedLine;\n            if (stepped) {\n                if (stepped === 'middle') {\n                    var midpoint = (previous.x + target.x) / 2;\n                    ctx.lineTo(midpoint, flip ? target.y : previous.y);\n                    ctx.lineTo(midpoint, flip ? previous.y : target.y);\n                } else if (stepped === 'after' && !flip || stepped !== 'after' && flip) {\n                    ctx.lineTo(previous.x, target.y);\n                } else {\n                    ctx.lineTo(target.x, previous.y);\n                }\n                ctx.lineTo(target.x, target.y);\n                return;\n            }\n            if (!target.tension) {\n                ctx.lineTo(target.x, target.y);\n                return;\n            }\n            ctx.bezierCurveTo(flip ? previous.controlPointPreviousX : previous.controlPointNextX, flip ? previous.controlPointPreviousY : previous.controlPointNextY, flip ? target.controlPointNextX : target.controlPointPreviousX, flip ? target.controlPointNextY : target.controlPointPreviousY, target.x, target.y);\n        }\n    };\n    module.exports = exports;\n    helpers.clear = exports.clear;\n    helpers.drawRoundedRectangle = function (ctx) {\n        ctx.beginPath();\n        exports.roundedRect.apply(exports, arguments);\n    };\n    function __isEmptyObject(obj) {\n        var attr;\n        for (attr in obj)\n            return !1;\n        return !0;\n    }\n    function __isValidToReturn(obj) {\n        return typeof obj != 'object' || Array.isArray(obj) || !__isEmptyObject(obj);\n    }\n    if (__isValidToReturn(module.exports))\n        return module.exports;\n    else if (__isValidToReturn(exports))\n        return exports;\n});"]}