{"version":3,"sources":["colors/strings.js"],"names":["define","colorNames","strings","getRgba","getHsla","getRgb","string","rgba","slice","getHsl","hsla","getHwb","getAlpha","vals","hexString","a","undefined","length","hexDouble","Math","round","rgbString","alpha","rgbaString","percentString","percentaString","r","g","b","hslString","hslaString","hwbString","hwb","keyword","rgb","reverseNames","match","hexAlpha","i","parseInt","parseFloat","scale","isNaN","num","min","max","str","toString","toUpperCase","name"],"mappings":"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","file":"../../colors/strings.js","sourcesContent":["define([\r\n  \"./names\"\r\n],function(colorNames){\r\n /* MIT license */\r\n  //var colorNames = require('color-name');\r\n\r\n  var strings = {\r\n     getRgba: getRgba,\r\n     getHsla: getHsla,\r\n     getRgb: getRgb,\r\n     getHsl: getHsl,\r\n     getHwb: getHwb,\r\n     getAlpha: getAlpha,\r\n\r\n     hexString: hexString,\r\n     rgbString: rgbString,\r\n     rgbaString: rgbaString,\r\n     percentString: percentString,\r\n     percentaString: percentaString,\r\n     hslString: hslString,\r\n     hslaString: hslaString,\r\n     hwbString: hwbString,\r\n     keyword: keyword\r\n  }\r\n\r\n  function getRgba(string) {\r\n     if (!string) {\r\n        return;\r\n     }\r\n     var abbr =  /^#([a-fA-F0-9]{3,4})$/i,\r\n         hex =  /^#([a-fA-F0-9]{6}([a-fA-F0-9]{2})?)$/i,\r\n         rgba = /^rgba?\\(\\s*([+-]?\\d+)\\s*,\\s*([+-]?\\d+)\\s*,\\s*([+-]?\\d+)\\s*(?:,\\s*([+-]?[\\d\\.]+)\\s*)?\\)$/i,\r\n         per = /^rgba?\\(\\s*([+-]?[\\d\\.]+)\\%\\s*,\\s*([+-]?[\\d\\.]+)\\%\\s*,\\s*([+-]?[\\d\\.]+)\\%\\s*(?:,\\s*([+-]?[\\d\\.]+)\\s*)?\\)$/i,\r\n         keyword = /(\\w+)/;\r\n\r\n     var rgb = [0, 0, 0],\r\n         a = 1,\r\n         match = string.match(abbr),\r\n         hexAlpha = \"\";\r\n     if (match) {\r\n        match = match[1];\r\n        hexAlpha = match[3];\r\n        for (var i = 0; i < rgb.length; i++) {\r\n           rgb[i] = parseInt(match[i] + match[i], 16);\r\n        }\r\n        if (hexAlpha) {\r\n           a = Math.round((parseInt(hexAlpha + hexAlpha, 16) / 255) * 100) / 100;\r\n        }\r\n     }\r\n     else if (match = string.match(hex)) {\r\n        hexAlpha = match[2];\r\n        match = match[1];\r\n        for (var i = 0; i < rgb.length; i++) {\r\n           rgb[i] = parseInt(match.slice(i * 2, i * 2 + 2), 16);\r\n        }\r\n        if (hexAlpha) {\r\n           a = Math.round((parseInt(hexAlpha, 16) / 255) * 100) / 100;\r\n        }\r\n     }\r\n     else if (match = string.match(rgba)) {\r\n        for (var i = 0; i < rgb.length; i++) {\r\n           rgb[i] = parseInt(match[i + 1]);\r\n        }\r\n        a = parseFloat(match[4]);\r\n     }\r\n     else if (match = string.match(per)) {\r\n        for (var i = 0; i < rgb.length; i++) {\r\n           rgb[i] = Math.round(parseFloat(match[i + 1]) * 2.55);\r\n        }\r\n        a = parseFloat(match[4]);\r\n     }\r\n     else if (match = string.match(keyword)) {\r\n        if (match[1] == \"transparent\") {\r\n           return [0, 0, 0, 0];\r\n        }\r\n        rgb = colorNames[match[1]];\r\n        if (!rgb) {\r\n           return;\r\n        }\r\n     }\r\n\r\n     for (var i = 0; i < rgb.length; i++) {\r\n        rgb[i] = scale(rgb[i], 0, 255);\r\n     }\r\n     if (!a && a != 0) {\r\n        a = 1;\r\n     }\r\n     else {\r\n        a = scale(a, 0, 1);\r\n     }\r\n     rgb[3] = a;\r\n     return rgb;\r\n  }\r\n\r\n  function getHsla(string) {\r\n     if (!string) {\r\n        return;\r\n     }\r\n     var hsl = /^hsla?\\(\\s*([+-]?\\d+)(?:deg)?\\s*,\\s*([+-]?[\\d\\.]+)%\\s*,\\s*([+-]?[\\d\\.]+)%\\s*(?:,\\s*([+-]?[\\d\\.]+)\\s*)?\\)/;\r\n     var match = string.match(hsl);\r\n     if (match) {\r\n        var alpha = parseFloat(match[4]);\r\n        var h = scale(parseInt(match[1]), 0, 360),\r\n            s = scale(parseFloat(match[2]), 0, 100),\r\n            l = scale(parseFloat(match[3]), 0, 100),\r\n            a = scale(isNaN(alpha) ? 1 : alpha, 0, 1);\r\n        return [h, s, l, a];\r\n     }\r\n  }\r\n\r\n  function getHwb(string) {\r\n     if (!string) {\r\n        return;\r\n     }\r\n     var hwb = /^hwb\\(\\s*([+-]?\\d+)(?:deg)?\\s*,\\s*([+-]?[\\d\\.]+)%\\s*,\\s*([+-]?[\\d\\.]+)%\\s*(?:,\\s*([+-]?[\\d\\.]+)\\s*)?\\)/;\r\n     var match = string.match(hwb);\r\n     if (match) {\r\n      var alpha = parseFloat(match[4]);\r\n        var h = scale(parseInt(match[1]), 0, 360),\r\n            w = scale(parseFloat(match[2]), 0, 100),\r\n            b = scale(parseFloat(match[3]), 0, 100),\r\n            a = scale(isNaN(alpha) ? 1 : alpha, 0, 1);\r\n        return [h, w, b, a];\r\n     }\r\n  }\r\n\r\n  function getRgb(string) {\r\n     var rgba = getRgba(string);\r\n     return rgba && rgba.slice(0, 3);\r\n  }\r\n\r\n  function getHsl(string) {\r\n    var hsla = getHsla(string);\r\n    return hsla && hsla.slice(0, 3);\r\n  }\r\n\r\n  function getAlpha(string) {\r\n     var vals = getRgba(string);\r\n     if (vals) {\r\n        return vals[3];\r\n     }\r\n     else if (vals = getHsla(string)) {\r\n        return vals[3];\r\n     }\r\n     else if (vals = getHwb(string)) {\r\n        return vals[3];\r\n     }\r\n  }\r\n\r\n  // generators\r\n  function hexString(rgba, a) {\r\n     var a = (a !== undefined && rgba.length === 3) ? a : rgba[3];\r\n     return \"#\" + hexDouble(rgba[0]) \r\n                + hexDouble(rgba[1])\r\n                + hexDouble(rgba[2])\r\n                + (\r\n                   (a >= 0 && a < 1)\r\n                   ? hexDouble(Math.round(a * 255))\r\n                   : \"\"\r\n                );\r\n  }\r\n\r\n  function rgbString(rgba, alpha) {\r\n     if (alpha < 1 || (rgba[3] && rgba[3] < 1)) {\r\n        return rgbaString(rgba, alpha);\r\n     }\r\n     return \"rgb(\" + rgba[0] + \", \" + rgba[1] + \", \" + rgba[2] + \")\";\r\n  }\r\n\r\n  function rgbaString(rgba, alpha) {\r\n     if (alpha === undefined) {\r\n        alpha = (rgba[3] !== undefined ? rgba[3] : 1);\r\n     }\r\n     return \"rgba(\" + rgba[0] + \", \" + rgba[1] + \", \" + rgba[2]\r\n             + \", \" + alpha + \")\";\r\n  }\r\n\r\n  function percentString(rgba, alpha) {\r\n     if (alpha < 1 || (rgba[3] && rgba[3] < 1)) {\r\n        return percentaString(rgba, alpha);\r\n     }\r\n     var r = Math.round(rgba[0]/255 * 100),\r\n         g = Math.round(rgba[1]/255 * 100),\r\n         b = Math.round(rgba[2]/255 * 100);\r\n\r\n     return \"rgb(\" + r + \"%, \" + g + \"%, \" + b + \"%)\";\r\n  }\r\n\r\n  function percentaString(rgba, alpha) {\r\n     var r = Math.round(rgba[0]/255 * 100),\r\n         g = Math.round(rgba[1]/255 * 100),\r\n         b = Math.round(rgba[2]/255 * 100);\r\n     return \"rgba(\" + r + \"%, \" + g + \"%, \" + b + \"%, \" + (alpha || rgba[3] || 1) + \")\";\r\n  }\r\n\r\n  function hslString(hsla, alpha) {\r\n     if (alpha < 1 || (hsla[3] && hsla[3] < 1)) {\r\n        return hslaString(hsla, alpha);\r\n     }\r\n     return \"hsl(\" + hsla[0] + \", \" + hsla[1] + \"%, \" + hsla[2] + \"%)\";\r\n  }\r\n\r\n  function hslaString(hsla, alpha) {\r\n     if (alpha === undefined) {\r\n        alpha = (hsla[3] !== undefined ? hsla[3] : 1);\r\n     }\r\n     return \"hsla(\" + hsla[0] + \", \" + hsla[1] + \"%, \" + hsla[2] + \"%, \"\r\n             + alpha + \")\";\r\n  }\r\n\r\n  // hwb is a bit different than rgb(a) & hsl(a) since there is no alpha specific syntax\r\n  // (hwb have alpha optional & 1 is default value)\r\n  function hwbString(hwb, alpha) {\r\n     if (alpha === undefined) {\r\n        alpha = (hwb[3] !== undefined ? hwb[3] : 1);\r\n     }\r\n     return \"hwb(\" + hwb[0] + \", \" + hwb[1] + \"%, \" + hwb[2] + \"%\"\r\n             + (alpha !== undefined && alpha !== 1 ? \", \" + alpha : \"\") + \")\";\r\n  }\r\n\r\n  function keyword(rgb) {\r\n    return reverseNames[rgb.slice(0, 3)];\r\n  }\r\n\r\n  // helpers\r\n  function scale(num, min, max) {\r\n     return Math.min(Math.max(min, num), max);\r\n  }\r\n\r\n  function hexDouble(num) {\r\n    var str = num.toString(16).toUpperCase();\r\n    return (str.length < 2) ? \"0\" + str : str;\r\n  }\r\n\r\n\r\n  //create a list of reverse color names\r\n  var reverseNames = {};\r\n  for (var name in colorNames) {\r\n     reverseNames[colorNames[name]] = name;\r\n  }\r\n\r\n  return strings;\r\n});"]}