{"version":3,"sources":["core/core.interaction.js"],"names":["define","__module__0","exports","module","helpers","getRelativePosition","e","chart","native","x","y","parseVisibleItems","handler","meta","i","j","ilen","jlen","data","datasets","length","isDatasetVisible","getDatasetMeta","element","_view","skip","getIntersectItems","position","elements","inRange","push","getNearestItems","intersect","distanceMetric","minDistance","Number","POSITIVE_INFINITY","nearestItems","center","getCenterPoint","distance","getDistanceMetricForAxis","axis","useX","indexOf","useY","pt1","pt2","deltaX","Math","abs","deltaY","sqrt","pow","indexMode","options","items","forEach","dataset","datasetIndex","_index","__isValidToReturn","obj","Array","isArray","attr","__isEmptyObject","modes","single","slice","label","index","_datasetIndex","x-axis","point","nearest","intersectsItem","inXRange","inYRange"],"mappings":"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","file":"../../core/core.interaction.js","sourcesContent":["define(['../helpers/index'], function (__module__0) {\n    'use strict';\n    var exports = {};\n    var module = { exports: {} };\n    var helpers = __module__0;\n    function getRelativePosition(e, chart) {\n        if (e.native) {\n            return {\n                x: e.x,\n                y: e.y\n            };\n        }\n        return helpers.getRelativePosition(e, chart);\n    }\n    function parseVisibleItems(chart, handler) {\n        var datasets = chart.data.datasets;\n        var meta, i, j, ilen, jlen;\n        for (i = 0, ilen = datasets.length; i < ilen; ++i) {\n            if (!chart.isDatasetVisible(i)) {\n                continue;\n            }\n            meta = chart.getDatasetMeta(i);\n            for (j = 0, jlen = meta.data.length; j < jlen; ++j) {\n                var element = meta.data[j];\n                if (!element._view.skip) {\n                    handler(element);\n                }\n            }\n        }\n    }\n    function getIntersectItems(chart, position) {\n        var elements = [];\n        parseVisibleItems(chart, function (element) {\n            if (element.inRange(position.x, position.y)) {\n                elements.push(element);\n            }\n        });\n        return elements;\n    }\n    function getNearestItems(chart, position, intersect, distanceMetric) {\n        var minDistance = Number.POSITIVE_INFINITY;\n        var nearestItems = [];\n        parseVisibleItems(chart, function (element) {\n            if (intersect && !element.inRange(position.x, position.y)) {\n                return;\n            }\n            var center = element.getCenterPoint();\n            var distance = distanceMetric(position, center);\n            if (distance < minDistance) {\n                nearestItems = [element];\n                minDistance = distance;\n            } else if (distance === minDistance) {\n                nearestItems.push(element);\n            }\n        });\n        return nearestItems;\n    }\n    function getDistanceMetricForAxis(axis) {\n        var useX = axis.indexOf('x') !== -1;\n        var useY = axis.indexOf('y') !== -1;\n        return function (pt1, pt2) {\n            var deltaX = useX ? Math.abs(pt1.x - pt2.x) : 0;\n            var deltaY = useY ? Math.abs(pt1.y - pt2.y) : 0;\n            return Math.sqrt(Math.pow(deltaX, 2) + Math.pow(deltaY, 2));\n        };\n    }\n    function indexMode(chart, e, options) {\n        var position = getRelativePosition(e, chart);\n        options.axis = options.axis || 'x';\n        var distanceMetric = getDistanceMetricForAxis(options.axis);\n        var items = options.intersect ? getIntersectItems(chart, position) : getNearestItems(chart, position, false, distanceMetric);\n        var elements = [];\n        if (!items.length) {\n            return [];\n        }\n        chart.data.datasets.forEach(function (dataset, datasetIndex) {\n            if (chart.isDatasetVisible(datasetIndex)) {\n                var meta = chart.getDatasetMeta(datasetIndex);\n                var element = meta.data[items[0]._index];\n                if (element && !element._view.skip) {\n                    elements.push(element);\n                }\n            }\n        });\n        return elements;\n    }\n    module.exports = {\n        modes: {\n            single: function (chart, e) {\n                var position = getRelativePosition(e, chart);\n                var elements = [];\n                parseVisibleItems(chart, function (element) {\n                    if (element.inRange(position.x, position.y)) {\n                        elements.push(element);\n                        return elements;\n                    }\n                });\n                return elements.slice(0, 1);\n            },\n            label: indexMode,\n            index: indexMode,\n            dataset: function (chart, e, options) {\n                var position = getRelativePosition(e, chart);\n                options.axis = options.axis || 'xy';\n                var distanceMetric = getDistanceMetricForAxis(options.axis);\n                var items = options.intersect ? getIntersectItems(chart, position) : getNearestItems(chart, position, false, distanceMetric);\n                if (items.length > 0) {\n                    items = chart.getDatasetMeta(items[0]._datasetIndex).data;\n                }\n                return items;\n            },\n            'x-axis': function (chart, e) {\n                return indexMode(chart, e, { intersect: false });\n            },\n            point: function (chart, e) {\n                var position = getRelativePosition(e, chart);\n                return getIntersectItems(chart, position);\n            },\n            nearest: function (chart, e, options) {\n                var position = getRelativePosition(e, chart);\n                options.axis = options.axis || 'xy';\n                var distanceMetric = getDistanceMetricForAxis(options.axis);\n                return getNearestItems(chart, position, options.intersect, distanceMetric);\n            },\n            x: function (chart, e, options) {\n                var position = getRelativePosition(e, chart);\n                var items = [];\n                var intersectsItem = false;\n                parseVisibleItems(chart, function (element) {\n                    if (element.inXRange(position.x)) {\n                        items.push(element);\n                    }\n                    if (element.inRange(position.x, position.y)) {\n                        intersectsItem = true;\n                    }\n                });\n                if (options.intersect && !intersectsItem) {\n                    items = [];\n                }\n                return items;\n            },\n            y: function (chart, e, options) {\n                var position = getRelativePosition(e, chart);\n                var items = [];\n                var intersectsItem = false;\n                parseVisibleItems(chart, function (element) {\n                    if (element.inYRange(position.y)) {\n                        items.push(element);\n                    }\n                    if (element.inRange(position.x, position.y)) {\n                        intersectsItem = true;\n                    }\n                });\n                if (options.intersect && !intersectsItem) {\n                    items = [];\n                }\n                return items;\n            }\n        }\n    };\n    function __isEmptyObject(obj) {\n        var attr;\n        for (attr in obj)\n            return !1;\n        return !0;\n    }\n    function __isValidToReturn(obj) {\n        return typeof obj != 'object' || Array.isArray(obj) || !__isEmptyObject(obj);\n    }\n    if (__isValidToReturn(module.exports))\n        return module.exports;\n    else if (__isValidToReturn(exports))\n        return exports;\n});"]}